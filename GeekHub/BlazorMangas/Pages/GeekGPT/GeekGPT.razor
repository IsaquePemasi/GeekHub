@page "/geekGPT"

@using Newtonsoft.Json
@using System.Text

<PageTitle>Chatbot</PageTitle>

<div class="container">
    <div class="row">
        <div class="col-3">
            <p>@trial</p>
        </div>
        <div class="col-3">
            <div class="messages">
                @for (int i = 0; i < messages.Count; i++)
                {
                    @if (i % 2 == 0)
                    {
                        <div class="question">@messages[i]</div>
                    }
                    else
                    {
                        <div class="response">@messages[i]</div>
                    }
                }

            </div>
            <div class="textMessage">
                <input @bind="message" />
                <button @onclick="SendMessage">Send</button>
            </div>
            <div class="textMessageClear">
                <button @onclick="Limpar">Clear</button>
            </div>
        </div>


    </div>
</div>


@code {
    public string message;
    public string? trial;
    public List<string> messages = new List<string>();
    private static HttpClient Http = new HttpClient();
    protected override async Task OnInitializedAsync() { }
    public async Task SendMessage()
    {
        Http = new HttpClient();
        messages.Add(message);

        // Replace [INSERT_YOUR_OWN_API_KEY] with a valid OpenAI API key
        var apiKey = "ERZwew8fNO6yUn7r5jT3BlbkFJmpn9YVu61CPFwHiorDYR";
        Http.DefaultRequestHeaders.Add("Authorization", $"Bearer {apiKey}");

        // JSON content for the API call
        var jsonContent = new
        {
            prompt = message,
            model = "text-davinci-003",
            max_tokens = 1000
        };

        // Make the API call
        var responseContent = await Http.PostAsync("https://api.openai.com/v1/completions", new
        StringContent(JsonConvert.SerializeObject(jsonContent), Encoding.UTF8, "application/json"));

        // Read the response as a string
        var resContext = await responseContent.Content.ReadAsStringAsync();

        // Deserialize the response into a dynamic object
        var data = JsonConvert.DeserializeObject<dynamic>(resContext);
        messages.Add(data.choices[0].text.ToString());
        StateHasChanged();
    }

    public void Limpar()
    {
        messages.Clear();
    }


}
<footer class="container">
    <hr class="featurette-divider">
    <div style="display:flex;">
        <p>
            © GeekHub - 2024 <br>👨‍💻 Feito por <a href="https://isaquepemasi.vercel.app/" style="text-decoration: none;">
                Isaque
            </a>
            <div style="margin-left:90px;">
                <a href="" style="text-decoration: none;">Parceiros</a>
            </div>
            <div style="margin-left:90px;">
                <a href="" style="text-decoration: none;">Perguntas frequentes</a>
            </div>
            <div style="margin-left:90px;">
                <a href="contato" style="text-decoration: none;">Contato</a>
            </div>
            <div style="margin-left:90px;">
                <a href="" style="text-decoration: none;">Políticas de cookies & privacidade</a>
            </div>
        </p>
    </div>
</footer>