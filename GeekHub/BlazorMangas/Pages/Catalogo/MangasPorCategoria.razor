@page "/MangasPorCategoria/{CategoriaId:int}"
<PageTitle>Categorias</PageTitle>

@if (MangasDto == null && MensagemErro == null)
{
    <Spinner />
}
else if (MensagemErro != null)
{
    <div style="text-align:center;">
    <DisplayMessage ErrorMessage="@MensagemErro" />
    </div>
    MensagemErro = null;
    <br>
    <p style="text-align:center;">Faça um <a href="https://localhost:7060/manga/create" style="text-decoration: none;">cadastro</a> de mangá, nessa categoria, e tente novamente</p>
    <br />
    <img src="/stop-anime.gif" style="margin: auto; display: block;" />
    <br />
    

}
else
{
    <h3>@NomeCategoria</h3>

    @if (MangasDto.Count() > 0)
    {
        <div class="row mt-6">
            <ExibirMangas Mangas="@MangasDto"></ExibirMangas>
        </div>
        <ChangeBackgroundColor />
        <Rodape />
    }

}

@code {
    [Parameter]
    public int CategoriaId { get; set; }

    [Inject]
    public IMangaService? _mangaService { get; set; }

    public IEnumerable<MangaDTO>? MangasDto { get; set; }

    public string? NomeCategoria { get; set; }
    public string? MensagemErro { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            //ProdutosDto = await ProdutoService.GetItensPorCategoria(CategoriaId);
            MangasDto = await _mangaService.GetMangasPorCategoria(CategoriaId);

            if (MangasDto != null && MangasDto.Count() > 0)
            {
                var mangaDto = MangasDto.FirstOrDefault(p => p.CategoriaId == CategoriaId);
                if (mangaDto != null)
                {
                    NomeCategoria = mangaDto.Categoria.Nome;
                }
            }
        }
        catch (Exception ex)
        {
            MensagemErro = "Categoria não encontrada";

        }
    }
}